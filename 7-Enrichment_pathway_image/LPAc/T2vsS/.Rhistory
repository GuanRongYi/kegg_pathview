create.db=reactive({
req(values$protein.id,input$dbname)
showModal(modalDialog(
title="Uinprot Index",footer=NULL,
box(status = "info",title = "Please waiting!",solidHeader=T,width = NULL,
"Database index is being built, waiting time is about 1 minute...!")
))
dir.create(path = paste("DB",input$dbname,sep="/"))
file.copy(input$file0$datapath,paste("DB",input$dbname,"sequence.fasta",sep="/"))
aa.data=system(paste("perl lib/get_aa_freq.pl",paste("DB",input$dbname,"sequence.fasta",sep="/")),intern = T)
write(aa.data,file=paste("DB",input$dbname,"AA_percentage.tsv",sep="/"))
write_tsv(values$protein.id,file=paste("DB",input$dbname,"product.tsv",sep="/"))
out.file=paste("DB",input$dbname,"annotation.tsv",sep="/")
t.data.list=list()
withProgress(message = 'Calculation in progress',detail = 'This may take a while...', value = 0, {
tn=ceiling(nrow(values$protein.id)/500)
data.list=split(values$protein.id,ceiling(c(1:nrow(values$protein.id))/500))
for(i in names(data.list)){
incProgress(amount = 1/tn,message = paste("Processing",i,"/",tn))
t.data.list[[i]]=get_uniprot(data.list[[i]])
}
})
t.data=rbindlist(t.data.list)
colnames(t.data)=c("Entry","Protein names","Gene names","Gene ontology IDs","Cross-reference (KEGG)","Cross-reference (eggNOG)","Cross-reference (Pfam)","Cross-reference (STRING)")
fwrite(t.data,file=out.file,sep="\t")
data.uniprot=fread(out.file)
data.uniprot=data.uniprot[-ncol(data.uniprot)]
my_genes = na.omit(unique(unlist(strsplit(data.uniprot$`Cross-reference (KEGG)`,split = ";"))))
kegg.species=names(sort(table(sub(my_genes,pattern = ":.*",replacement = "")),decreasing = T)[1])
summary.data=data.frame(check.names = F,
`Database name`=input$dbname,
`Create time`=Sys.time(),
Proteins=nrow(values$protein.id),
Genes=length(unique(values$protein.id$`Gene name`)),
`Gene Ontology`=sum(!is.na(data.uniprot$`Gene ontology IDs`)),
`KEGG`=sum(!is.na(data.uniprot$`Cross-reference (KEGG)`)),
`Pfam`=sum(!is.na(data.uniprot$`Cross-reference (Pfam)`)),
`eggNOG`=sum(!is.na(data.uniprot$`Cross-reference (eggNOG)`))
)
write_tsv(file=paste("DB",input$dbname,"summary.tsv",sep="/"),summary.data)
removeModal()
create.kegg(input$dbname,kegg.species)
create.go(input$dbname)
create.nog(input$dbname)
create.pfam(input$dbname)
create.image(input$dbname)
})
# ----------------------------------------modified---------------------------------------------
observeEvent(input$ptm.file,execute_safely({
req(input$analysis.db,input$motified.type)
sequence <- read.fasta(paste("DB",input$analysis.db,"sequence.fasta",sep="/"),seqtype = "AA",as.string = T)
names(sequence) <- lapply(names(sequence),function(x){unlist(str_split(x,pattern = "\\|"))[2]})
sequence <- sapply(sequence,"[",1)
sequence <- as.data.frame(sequence)
sequence[,"Protein accession"] <- rownames(sequence)
colnames(sequence) <- c("Sequence","Protein accession")
values$sequence <- sequence
# values$data=fread(file=input$ptm.file$datapath,na.strings = "",stringsAsFactors = F,integer64 = "numeric") %>% rename(`Protein accession` = "Protein.Group") %>%
#   mutate(`Protein accession`= sub(`Protein accession`,pattern=";.*",replacement=""))
# # values$summary.table.temp = data.frame()
out=ptm.file.preprocess(input$ptm.file$datapath,values$sequence,values$motified.list,input$motified.type)
values$quant.protein=out$quant
# print(head(values$quant.protein))
updatePickerInput(session,inputId = 'quant.method',choices = names(values$quant.protein))
values$protein.data.temp=out$ident
values$summary.table.temp = out$summary.table
},message = "The content or format of the uploaded file does not meet the requirements, please upload the report.pr_matrix.tsv file in the DIA-NN output txt folder!"))
